# AoC 2022 - Day 2

```elixir
Mix.install([
  {:kino, "~> 0.8.0"}
])
```

## Structured Approach

Things I learned from the meetup:

1. Consider a util method to read in the file/lines from the input document
2. Convert strings into something more useful as early as possible.
3. Think about your data structures.  Lists, tuples, maps - which makes the most sense given the shape of the data?
4. Set up your pipeline at the beginning to describe the steps you'll need to take.  Then go back and implement the steps using built-in methods or custom methods as it makes sense.

```elixir
defmodule FileUtil do
  @doc """
  Given a filename, reads in the file and returns a list of strings,
  with each string containing one line of the file.

  Assumes that the file exists in the current directory
  """
  def readlines(filename) do
    File.read!("#{__DIR__}/#{filename}")
    |> String.split("\n", trim: true)
  end
end

# FileUtil.readlines('test_input.txt');
```

```elixir
defmodule DayTwo do
  @doc """
  Convert list of cryptic letters to tuple of meaningful atoms
  input: ["A", "Y"]
  output: {:rock, :rock}
  """
  def decode_round([player1, player2]) do
    decoder = %{
      "A" => :rock,
      "B" => :paper,
      "C" => :scissors,
      "X" => :rock,
      "Y" => :paper,
      "Z" => :scissors
    }

    {Map.get(decoder, player1), Map.get(decoder, player2)}
  end

  # Winning rounds score 6
  def score_on_outcome({:rock, :paper}), do: 6
  def score_on_outcome({:paper, :scissors}), do: 6
  def score_on_outcome({:scissors, :rock}), do: 6
  # Losing rounds score 0
  def score_on_outcome({:rock, :scissors}), do: 0
  def score_on_outcome({:paper, :rock}), do: 0
  def score_on_outcome({:scissors, :paper}), do: 0
  # Draw scores 3
  def score_on_outcome(_), do: 3

  def score_on_move(:rock), do: 1
  def score_on_move(:paper), do: 2
  def score_on_move(:scissors), do: 3

  @doc """
  Score a round based on the given rules:
  Winning = 6 pts
  Tie = 3 pts
  Lose = 0 pts

  Regardless of winning or losing, points are also assigned based
  on the move thrown:
  Rock = 1 pt
  Paper = 2 pts
  Scissors = 3pts
  """
  def score_round({_player1, player2} = game) do
    score_on_outcome(game) + score_on_move(player2)
  end

  def get_tournament_score(input_file) do
    input_file
    |> FileUtil.readlines()
    |> Enum.map(&String.split/1)
    |> Enum.map(&DayTwo.decode_round/1)
    |> Enum.map(&DayTwo.score_round/1)
    |> Enum.sum()
  end
end

DayTwo.get_tournament_score("test_input.txt")

# input_filename = "test_input.txt"

# input_filename
# |> FileUtil.readlines()
# |> Enum.map(&String.split/1)
# |> Enum.map(&DayTwo.decode_round/1)
# |> Enum.map(&DayTwo.score_round/1)
# |> Enum.sum()
# |> dbg()
```

```elixir
defmodule DayTwoPartTwo do
  @doc """
  Convert list of cryptic letters to tuple of meaningful atoms
  input: ["A", "Y"]

  A - rock
  B - paper
  C - scissors

  X means you need to lose, 
  Y means you need to end the round in a draw, and 
  Z means you need to win.

  output: {:rock, :draw}
  """
  def decode_round([player1, outcome]) do
    move_decoder = %{
      "A" => :rock,
      "B" => :paper,
      "C" => :scissors
    }

    outcome_decoder = %{
      "X" => :lose,
      "Y" => :draw,
      "Z" => :win
    }

    {Map.get(move_decoder, player1), Map.get(outcome_decoder, outcome)}
  end

  @doc """
  Based on the other player's move and the outcome of the round,
  select a move that will result in the expected outcome

  input: {:rock, :draw}
  output: :rock
  """
  def select_move({:rock, :draw}), do: :rock
  def select_move({:paper, :draw}), do: :paper
  def select_move({:scissors, :draw}), do: :scissors
  def select_move({:rock, :win}), do: :paper
  def select_move({:paper, :win}), do: :scissors
  def select_move({:scissors, :win}), do: :rock
  def select_move({:rock, :lose}), do: :scissors
  def select_move({:paper, :lose}), do: :rock
  def select_move({:scissors, :lose}), do: :paper

  @doc """
  Create new tuple that includes the player2 move along with the 
  player1 move and the outcome
  """
  def add_player2_move({player1, outcome} = input) do
    {player1, select_move(input), outcome}
  end

  @doc """
  Based on the outcome, assign 0, 3, or 6 points
  """
  def score_on_outcome(:win), do: 6
  def score_on_outcome(:lose), do: 0
  def score_on_outcome(:draw), do: 3

  @doc """
  Calculate the total score based on the selected move and the outcome
  """
  def score_round({_player1, player2, outcome}) do
    score_on_outcome(outcome) + DayTwo.score_on_move(player2)
  end

  def get_tournament_score(input_file) do
    input_file
    |> FileUtil.readlines()
    |> Enum.map(&String.split/1)
    |> Enum.map(&DayTwoPartTwo.decode_round/1)
    |> Enum.map(&DayTwoPartTwo.add_player2_move/1)
    |> Enum.map(&DayTwoPartTwo.score_round/1)
    |> Enum.sum()
  end
end
```

## TDD

```elixir
ExUnit.start(auto_run: false)

defmodule DayTwoTest do
  use ExUnit.Case, async: false

  test "day 2 - part 1" do
    assert DayTwo.get_tournament_score("test_input.txt") == 15
  end

  test "day 2 - part 2" do
    assert DayTwoPartTwo.get_tournament_score("test_input.txt") == 12
  end
end

ExUnit.run()
```

## Calculate Real Values

```elixir
DayTwo.get_tournament_score("input.txt")

DayTwoPartTwo.get_tournament_score("input.txt")
```
